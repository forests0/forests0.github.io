{"version":3,"sources":["component/Td.js","component/Tr.js","component/Table.js","component/Form.js","component/MineSearch.js","App.js","index.js"],"names":["getTdStyle","code","CODE","NORMAL","MINE","background","CLICKED_MINE","OPENED","QUESTION_MINE","QUESTION","FLAG_MINE","FLAG","getTdText","icon","faBomb","faFlag","faQuestion","Td","memo","rowIndex","cellIndex","useContext","TableContext","tableData","dispatch","halted","onClickTd","useCallback","console","log","type","OPEN_CELL","row","cell","CLICK_MINE","onRightClickTd","e","preventDefault","FLAG_CELL","QUESTION_CELL","NORMAL_CELL","style","onClick","onContextMenu","Tr","Array","length","fill","map","td","i","Table","tr","Form","useState","setRow","setCell","mine","setMine","onChangeRow","target","value","onChangeCell","onChangeMine","onClickBtn","START_GAME","class","className","placeholder","onChange","createContext","initialState","timer","result","gameData","isWin","plantMine","data","shuffle","chosen","Math","floor","random","includes","push","rowData","j","k","ver","hor","INCREMENT_TIMER","reducer","state","action","forEach","checked","openCount","checkAround","around","concat","count","filter","v","near","n","MineSearch","useReducer","useMemo","useEffect","setInterval","clearInterval","Provider","faStopwatch","App","rootElement","document","getElementById","createRoot","render"],"mappings":"8PAaMA,EAAa,SAACC,GAClB,OAAQA,GACN,KAAKC,EAAKC,OACV,KAAKD,EAAKE,KACR,MAAO,CACLC,WAAY,QAEhB,KAAKH,EAAKI,aACR,MAAO,CACLD,WAAY,OAEhB,KAAKH,EAAKK,OACR,MAAO,CACLF,WAAY,SAEhB,KAAKH,EAAKM,cACV,KAAKN,EAAKO,SACR,MAAO,CACLJ,WAAY,UAEhB,KAAKH,EAAKQ,UACV,KAAKR,EAAKS,KACR,MAAO,CACLN,WAAY,SAEhB,QACE,MAAO,CACLA,WAAY,WAKdO,EAAY,SAACX,GACjB,OAAQA,GACN,KAAKC,EAAKC,OAEV,KAAKD,EAAKE,KACR,MAAO,GACT,KAAKF,EAAKI,aAER,OADa,cAAC,IAAD,CAAiBO,KAAMC,MAEtC,KAAKZ,EAAKQ,UACV,KAAKR,EAAKS,KAER,OADa,cAAC,IAAD,CAAiBE,KAAME,MAEtC,KAAKb,EAAKM,cACV,KAAKN,EAAKO,SAER,OADiB,cAAC,IAAD,CAAiBI,KAAMG,MAE1C,QACE,OAAOf,GAAQ,KAsENgB,EAlEJC,gBAAK,YAA8B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAC3B,EAAwCC,qBAAWC,GAA3CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,OAEvBC,EAAYC,uBAAY,WAE5B,GADAC,QAAQC,IAAIJ,IACRA,EAGJ,OAAQF,EAAUJ,GAAUC,IAC1B,KAAKlB,EAAKK,OACV,KAAKL,EAAKQ,UACV,KAAKR,EAAKS,KACV,KAAKT,EAAKM,cACV,KAAKN,EAAKO,SACR,OACF,KAAKP,EAAKC,OAER,YADAqB,EAAS,CAAEM,KAAMC,EAAWC,IAAKb,EAAUc,KAAMb,IAEnD,KAAKlB,EAAKE,KAER,YADAoB,EAAS,CAAEM,KAAMI,EAAYF,IAAKb,EAAUc,KAAMb,IAEpD,QACE,UAEH,CAACG,EAAWH,EAAWD,EAAUK,EAAUC,IAExCU,EAAiBR,uBACrB,SAACS,GAGC,GAFAA,EAAEC,kBAEEZ,EAGJ,OAAQF,EAAUJ,GAAUC,IAC1B,KAAKlB,EAAKK,OACR,OACF,KAAKL,EAAKC,OACV,KAAKD,EAAKE,KAER,YADAoB,EAAS,CAAEM,KAAMQ,EAAWN,IAAKb,EAAUc,KAAMb,IAEnD,KAAKlB,EAAKQ,UACV,KAAKR,EAAKS,KAER,YADAa,EAAS,CAAEM,KAAMS,EAAeP,IAAKb,EAAUc,KAAMb,IAEvD,KAAKlB,EAAKM,cACV,KAAKN,EAAKO,SAER,YADAe,EAAS,CAAEM,KAAMU,EAAaR,IAAKb,EAAUc,KAAMb,IAErD,QACE,UAGN,CAACG,EAAWH,EAAWD,EAAUK,EAAUC,IAG7C,OACE,oBACEgB,MAAOzC,EAAWuB,EAAUJ,GAAUC,IACtCsB,QAAShB,EACTiB,cAAeR,EAHjB,SAKGvB,EAAUW,EAAUJ,GAAUC,SChHtBwB,EAZJ,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SACJI,EAAcF,qBAAWC,GAAzBC,UACR,OACE,6BACGA,EAAU,IACTsB,MAAMtB,EAAU,GAAGuB,QAChBC,OACAC,KAAI,SAACC,EAAIC,GAAL,OAAW,cAAC,EAAD,CAAI/B,SAAUA,EAAUC,UAAW8B,UCM9CC,EAbD,WACZ,IAAQ5B,EAAcF,qBAAWC,GAAzBC,UACR,OACE,gCACGsB,MAAMtB,EAAUuB,QACdC,OACAC,KAAI,SAACI,EAAIF,GAAL,OACH,cAAC,EAAD,CAAI/B,SAAU+B,UC6CTG,G,MApDFnC,gBAAK,WAChB,MAAsBoC,mBAAS,IAA/B,mBAAOtB,EAAP,KAAYuB,EAAZ,KACA,EAAwBD,mBAAS,IAAjC,mBAAOrB,EAAP,KAAauB,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACQlC,EAAaH,qBAAWC,GAAxBE,SAEFmC,EAAchC,uBAAY,SAACS,GAC/BmB,EAAOnB,EAAEwB,OAAOC,SACf,IAEGC,EAAenC,uBAAY,SAACS,GAChCoB,EAAQpB,EAAEwB,OAAOC,SAChB,IAEGE,EAAepC,uBAAY,SAACS,GAChCsB,EAAQtB,EAAEwB,OAAOC,SAChB,IAEGG,EAAarC,uBAAY,WAC7BH,EAAS,CAAEM,KAAMmC,EAAYjC,MAAKC,OAAMwB,WACvC,CAACjC,EAAUQ,EAAKC,EAAMwB,IAEzB,OACE,sBAAKS,MAAM,aAAX,UACE,uBACEC,UAAU,eACVrC,KAAK,SACLsC,YAAY,eACZP,MAAO7B,EACPqC,SAAUV,IAEZ,uBACEQ,UAAU,cACVrC,KAAK,SACLsC,YAAY,eACZP,MAAO5B,EACPoC,SAAUP,IAEZ,uBACEK,UAAU,eACVrC,KAAK,SACLsC,YAAY,eACZP,MAAOJ,EACPY,SAAUN,IAEZ,wBAAQrB,QAASsB,EAAYG,UAAU,YAAvC,iCC3COjE,EAAO,CAClBE,MAAO,EACPD,QAAS,EACTM,UAAW,EACXE,MAAO,EACPH,eAAgB,EAChBE,WAAY,EACZJ,cAAe,EACfC,OAAQ,GAIGe,EAAegD,wBAAc,CACxC/C,UAAW,GACXC,SAAU,aACVC,QAAQ,IAGJ8C,EAAe,CACnBhD,UAAW,GACXiD,MAAO,EACPC,OAAQ,GACRhD,QAAQ,EACRiD,SAAU,CACR1C,IAAK,EACLC,KAAM,EACNwB,KAAM,GAERkB,OAAO,GAGHC,EAAY,SAAC5C,EAAKC,EAAMwB,GAI5B,IAHA,IAAMoB,EAAO,GACPC,EAAU,GACZ5B,EAAI,EACDA,EAAIO,GAAM,CACf,IAAMsB,EAASC,KAAKC,MAAMD,KAAKE,UAAYlD,EAAMC,KAChB,IAA7B6C,EAAQK,SAASJ,KACnBD,EAAQM,KAAKL,GACb7B,KAIJ,IAAK,IAAIA,EAAI,EAAGA,EAAIlB,EAAKkB,IAAK,CAC5B,IAAMmC,EAAU,GAChBR,EAAKO,KAAKC,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIrD,EAAMqD,IACxBD,EAAQD,KAAKlF,EAAKC,QAItB,IAAK,IAAIoF,EAAI,EAAGA,EAAIT,EAAQhC,OAAQyC,IAAK,CACvC,IAAMC,EAAMR,KAAKC,MAAMH,EAAQS,GAAKtD,GAC9BwD,EAAMX,EAAQS,GAAKtD,EACzB4C,EAAKW,GAAKC,GAAOvF,EAAKE,KAGxB,OAAOyE,GAGIZ,EAAa,aACblC,EAAY,YACZG,EAAa,aACbI,EAAY,YACZC,EAAgB,gBAChBC,EAAc,cACdkD,EAAkB,kBAEzBC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAO/D,MACb,KAAKmC,EACH,OAAO,2BACF2B,GADL,IAEErE,UAAWqD,EAAUiB,EAAO7D,IAAK6D,EAAO5D,KAAM4D,EAAOpC,MACrDhC,QAAQ,EACRiD,SAAU,CACR1C,IAAK6D,EAAO7D,IACZC,KAAM4D,EAAO5D,KACbwB,KAAMoC,EAAOpC,MAEfe,MAAO,EACPC,OAAQ,GACRE,OAAO,IAEX,KAAK5C,EACH,IAAMR,EAAS,YAAOqE,EAAMrE,WAC5BA,EAAUuE,SAAQ,SAAC9D,EAAKkB,GACtB3B,EAAU2B,GAAV,YAAmBlB,MAErB,IAAM+D,EAAU,GAEZC,EAAY,GAEI,SAAdC,EAAejE,EAAKC,GACxB,KACED,EAAM,GACNA,GAAOT,EAAUuB,QACjBb,EAAO,GACPA,GAAQV,EAAU,GAAGuB,UAMrB,CACE5C,EAAKS,KACLT,EAAKQ,UACLR,EAAKK,OACLL,EAAKO,SACLP,EAAKM,eACL2E,SAAS5D,EAAUS,GAAKC,MAIxB8D,EAAQZ,SAASnD,EAAM,IAAMC,GAAjC,CAGE8D,EAAQX,KAAKpD,EAAM,IAAMC,GAE3B,IAAIiE,EAAS,GACT3E,EAAUS,EAAM,KAClBkE,EAASA,EAAOC,OAAO,CACrB5E,EAAUS,EAAM,GAAGC,EAAO,GAC1BV,EAAUS,EAAM,GAAGC,GACnBV,EAAUS,EAAM,GAAGC,EAAO,MAI9BiE,EAASA,EAAOC,OAAO,CACrB5E,EAAUS,GAAKC,EAAO,GACtBV,EAAUS,GAAKC,EAAO,KAGpBV,EAAUS,EAAM,KAClBkE,EAASA,EAAOC,OAAO,CACrB5E,EAAUS,EAAM,GAAGC,EAAO,GAC1BV,EAAUS,EAAM,GAAGC,GACnBV,EAAUS,EAAM,GAAGC,EAAO,MAI9B,IAAMmE,EAAQF,EAAOG,QAAO,SAACC,GAAD,MAC1B,CAACpG,EAAKQ,UAAWR,EAAKE,KAAMF,EAAKM,eAAe2E,SAASmB,MACzDxD,OAEF,GAAc,IAAVsD,GACEpE,GAAO,EAAG,CACZ,IAAMuE,EAAO,GACTvE,EAAM,GAAK,IACbuE,EAAKnB,KAAK,CAACpD,EAAM,EAAGC,EAAO,IAC3BsE,EAAKnB,KAAK,CAACpD,EAAM,EAAGC,IACpBsE,EAAKnB,KAAK,CAACpD,EAAM,EAAGC,EAAO,KAE7BsE,EAAKnB,KAAK,CAACpD,EAAKC,EAAO,IACvBsE,EAAKnB,KAAK,CAACpD,EAAKC,EAAO,IACnBD,EAAM,EAAIT,EAAUuB,SACtByD,EAAKnB,KAAK,CAACpD,EAAM,EAAGC,EAAO,IAC3BsE,EAAKnB,KAAK,CAACpD,EAAM,EAAGC,IACpBsE,EAAKnB,KAAK,CAACpD,EAAM,EAAGC,EAAO,KAE7BsE,EAAKT,SAAQ,SAACU,GACRjF,EAAUiF,EAAE,IAAIA,EAAE,MAAQtG,EAAKK,QACjC0F,EAAYO,EAAE,GAAIA,EAAE,OAK5BjF,EAAUS,GAAKC,GAAQmE,GAGzBH,CAAYJ,EAAO7D,IAAK6D,EAAO5D,MAE/BV,EAAUuE,SAAQ,SAAC1C,EAAIF,GACrBE,EAAG0C,SAAQ,SAAC7C,EAAIqC,GACVrC,GAAM,IACR+C,GAAa,SAKnB,IAAIvE,GAAS,EACTgD,EAAS,GACTE,GAAQ,EASZ,OAPEqB,IACAJ,EAAMlB,SAAS1C,IAAM4D,EAAMlB,SAASzC,KAAO2D,EAAMlB,SAASjB,OAE1DhC,GAAS,EACTgD,EAAS,8CAAiBmB,EAAMpB,MAAvB,gBACTG,GAAQ,GAEH,2BACFiB,GADL,IAEErE,YACAE,SACAgD,SACAE,UAGJ,KAAKzC,EACH,IAAMX,EAAS,YAAOqE,EAAMrE,WAC5BA,EAAUsE,EAAO7D,KAAjB,YAA4B4D,EAAMrE,UAAUsE,EAAO7D,MACnDT,EAAUsE,EAAO7D,KAAK6D,EAAO5D,MAAQ/B,EAAKI,aAC1C,IAAK,IAAI4C,EAAI,EAAGA,EAAI0C,EAAMlB,SAAS1C,IAAKkB,IACtC,IAAK,IAAIoC,EAAI,EAAGA,EAAIM,EAAMlB,SAASzC,KAAMqD,IAErC/D,EAAU2B,GAAGoC,KAAOpF,EAAKE,MACzBmB,EAAU2B,GAAGoC,KAAOpF,EAAKQ,YAEzBa,EAAU2B,GAAGoC,GAAKpF,EAAKI,cAK7B,OAAO,2BACFsF,GADL,IAEErE,YACAE,QAAQ,IAGZ,KAAKa,EACH,IAAMf,EAAS,YAAOqE,EAAMrE,WAM5B,OALAA,EAAUsE,EAAO7D,KAAjB,YAA4B4D,EAAMrE,UAAUsE,EAAO7D,MACnDT,EAAUsE,EAAO7D,KAAK6D,EAAO5D,MAC3BV,EAAUsE,EAAO7D,KAAK6D,EAAO5D,QAAU/B,EAAKE,KACxCF,EAAKQ,UACLR,EAAKS,KACJ,2BACFiF,GADL,IAEErE,cAGJ,KAAKgB,EACH,IAAMhB,EAAS,YAAOqE,EAAMrE,WAM5B,OALAA,EAAUsE,EAAO7D,KAAjB,YAA4B4D,EAAMrE,UAAUsE,EAAO7D,MACnDT,EAAUsE,EAAO7D,KAAK6D,EAAO5D,MAC3BV,EAAUsE,EAAO7D,KAAK6D,EAAO5D,QAAU/B,EAAKQ,UACxCR,EAAKM,cACLN,EAAKO,SACJ,2BACFmF,GADL,IAEErE,cAGJ,KAAKiB,EACH,IAAMjB,EAAS,YAAOqE,EAAMrE,WAM5B,OALAA,EAAUsE,EAAO7D,KAAjB,YAA4B4D,EAAMrE,UAAUsE,EAAO7D,MACnDT,EAAUsE,EAAO7D,KAAK6D,EAAO5D,MAC3BV,EAAUsE,EAAO7D,KAAK6D,EAAO5D,QAAU/B,EAAKM,cACxCN,EAAKE,KACLF,EAAKC,OACJ,2BACFyF,GADL,IAEErE,cAGJ,KAAKmE,EACH,OAAO,2BACFE,GADL,IAEEpB,MAAOoB,EAAMpB,MAAQ,IAGzB,QACE,OAAOoB,IAyCEa,EArCI,WACjB,MAA0BC,qBAAWf,EAASpB,GAA9C,mBAAOqB,EAAP,KAAcpE,EAAd,KACQD,EAAqCqE,EAArCrE,UAAWE,EAA0BmE,EAA1BnE,OAAQ+C,EAAkBoB,EAAlBpB,MAAOC,EAAWmB,EAAXnB,OAC5BZ,EAAQ8C,mBACZ,iBAAO,CAAEpF,UAAWA,EAAWE,OAAQA,EAAQD,cAC/C,CAACD,EAAWE,IAed,OAZAmF,qBAAU,WACR,IAAIpC,EAMJ,OALK/C,IACH+C,EAAQqC,aAAY,WAClBrF,EAAS,CAAEM,KAAM4D,MAChB,MAEE,WACLoB,cAActC,MAEf,CAAC/C,IAGF,eAACH,EAAayF,SAAd,CAAuBlD,MAAOA,EAA9B,UACE,cAAC,EAAD,IACA,sBAAKK,MAAM,QAAX,UACE,cAAC,IAAD,CAAiBrD,KAAMmG,MADzB,IAC0CxC,KAE1C,cAAC,EAAD,IAECoB,EAAMjB,MACL,sBAAKT,MAAM,aAAX,cAA0BO,KAE1B,qBAAKP,MAAM,cAAX,SAA0BO,QC7SnB,SAASwC,IACtB,OACE,qBAAK9C,UAAU,MAAf,SACE,cAAC,EAAD,MCDN,IAAM+C,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAAC,EAAD,S","file":"static/js/main.40af09f4.chunk.js","sourcesContent":["import React, { memo, useCallback, useContext } from \"react\";\r\nimport {\r\n  CODE,\r\n  OPEN_CELL,\r\n  CLICK_MINE,\r\n  TableContext,\r\n  FLAG_CELL,\r\n  QUESTION_CELL,\r\n  NORMAL_CELL\r\n} from \"./MineSearch\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBomb, faFlag, faQuestion } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst getTdStyle = (code) => {\r\n  switch (code) {\r\n    case CODE.NORMAL:\r\n    case CODE.MINE:\r\n      return {\r\n        background: \"#444\"\r\n      };\r\n    case CODE.CLICKED_MINE:\r\n      return {\r\n        background: \"red\"\r\n      };\r\n    case CODE.OPENED:\r\n      return {\r\n        background: \"white\"\r\n      };\r\n    case CODE.QUESTION_MINE:\r\n    case CODE.QUESTION:\r\n      return {\r\n        background: \"yellow\"\r\n      };\r\n    case CODE.FLAG_MINE:\r\n    case CODE.FLAG:\r\n      return {\r\n        background: \"green\"\r\n      };\r\n    default:\r\n      return {\r\n        background: \"white\"\r\n      };\r\n  }\r\n};\r\n\r\nconst getTdText = (code) => {\r\n  switch (code) {\r\n    case CODE.NORMAL:\r\n      return \"\";\r\n    case CODE.MINE:\r\n      return \"\";\r\n    case CODE.CLICKED_MINE:\r\n      const boom = <FontAwesomeIcon icon={faBomb} />;\r\n      return boom;\r\n    case CODE.FLAG_MINE:\r\n    case CODE.FLAG:\r\n      const flag = <FontAwesomeIcon icon={faFlag} />;\r\n      return flag;\r\n    case CODE.QUESTION_MINE:\r\n    case CODE.QUESTION:\r\n      const question = <FontAwesomeIcon icon={faQuestion} />;\r\n      return question;\r\n    default:\r\n      return code || \"\";\r\n  }\r\n};\r\n\r\nconst Td = memo(({ rowIndex, cellIndex }) => {\r\n  const { tableData, dispatch, halted } = useContext(TableContext);\r\n\r\n  const onClickTd = useCallback(() => {\r\n    console.log(halted);\r\n    if (halted) {\r\n      return;\r\n    }\r\n    switch (tableData[rowIndex][cellIndex]) {\r\n      case CODE.OPENED:\r\n      case CODE.FLAG_MINE:\r\n      case CODE.FLAG:\r\n      case CODE.QUESTION_MINE:\r\n      case CODE.QUESTION:\r\n        return;\r\n      case CODE.NORMAL:\r\n        dispatch({ type: OPEN_CELL, row: rowIndex, cell: cellIndex });\r\n        return;\r\n      case CODE.MINE:\r\n        dispatch({ type: CLICK_MINE, row: rowIndex, cell: cellIndex });\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n  }, [tableData, cellIndex, rowIndex, dispatch, halted]);\r\n\r\n  const onRightClickTd = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n\r\n      if (halted) {\r\n        return;\r\n      }\r\n      switch (tableData[rowIndex][cellIndex]) {\r\n        case CODE.OPENED:\r\n          return;\r\n        case CODE.NORMAL:\r\n        case CODE.MINE:\r\n          dispatch({ type: FLAG_CELL, row: rowIndex, cell: cellIndex });\r\n          return;\r\n        case CODE.FLAG_MINE:\r\n        case CODE.FLAG:\r\n          dispatch({ type: QUESTION_CELL, row: rowIndex, cell: cellIndex });\r\n          return;\r\n        case CODE.QUESTION_MINE:\r\n        case CODE.QUESTION:\r\n          dispatch({ type: NORMAL_CELL, row: rowIndex, cell: cellIndex });\r\n          return;\r\n        default:\r\n          return;\r\n      }\r\n    },\r\n    [tableData, cellIndex, rowIndex, dispatch, halted]\r\n  );\r\n\r\n  return (\r\n    <td\r\n      style={getTdStyle(tableData[rowIndex][cellIndex])}\r\n      onClick={onClickTd}\r\n      onContextMenu={onRightClickTd}\r\n    >\r\n      {getTdText(tableData[rowIndex][cellIndex])}\r\n    </td>\r\n  );\r\n});\r\n\r\nexport default Td;\r\n","import React, { useContext } from \"react\";\r\nimport Td from \"./Td\";\r\nimport { TableContext } from \"./MineSearch\";\r\n\r\nconst Tr = ({ rowIndex }) => {\r\n  const { tableData } = useContext(TableContext);\r\n  return (\r\n    <tr>\r\n      {tableData[0] &&\r\n        Array(tableData[0].length)\r\n          .fill()\r\n          .map((td, i) => <Td rowIndex={rowIndex} cellIndex={i} />)}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Tr;\r\n","import React, { useContext } from \"react\";\r\nimport Tr from \"./Tr\";\r\nimport { TableContext } from \"./MineSearch\";\r\n\r\nconst Table = () => {\r\n  const { tableData } = useContext(TableContext);\r\n  return (\r\n    <table>\r\n      {Array(tableData.length)\r\n        .fill()\r\n        .map((tr, i) => (\r\n          <Tr rowIndex={i} />\r\n        ))}\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState, useCallback, useContext, memo } from \"react\";\r\nimport { TableContext, START_GAME } from \"./MineSearch\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = memo(() => {\r\n  const [row, setRow] = useState(10);\r\n  const [cell, setCell] = useState(10);\r\n  const [mine, setMine] = useState(20);\r\n  const { dispatch } = useContext(TableContext);\r\n\r\n  const onChangeRow = useCallback((e) => {\r\n    setRow(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeCell = useCallback((e) => {\r\n    setCell(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeMine = useCallback((e) => {\r\n    setMine(e.target.value);\r\n  }, []);\r\n\r\n  const onClickBtn = useCallback(() => {\r\n    dispatch({ type: START_GAME, row, cell, mine });\r\n  }, [dispatch, row, cell, mine]);\r\n\r\n  return (\r\n    <div class=\"set-option\">\r\n      <input\r\n        className=\"set-cell--in\"\r\n        type=\"number\"\r\n        placeholder=\"세로\"\r\n        value={row}\r\n        onChange={onChangeRow}\r\n      />\r\n      <input\r\n        className=\"set-row--in\"\r\n        type=\"number\"\r\n        placeholder=\"가로\"\r\n        value={cell}\r\n        onChange={onChangeCell}\r\n      />\r\n      <input\r\n        className=\"set-mine--in\"\r\n        type=\"number\"\r\n        placeholder=\"지뢰\"\r\n        value={mine}\r\n        onChange={onChangeMine}\r\n      />\r\n      <button onClick={onClickBtn} className=\"set-start\">\r\n        시작\r\n      </button>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Form;\r\n","import React, { useReducer, createContext, useMemo, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Table from \"./Table\";\r\nimport Form from \"./Form\";\r\nimport { faSmileWink, faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const CODE = {\r\n  MINE: -7,\r\n  NORMAL: -1,\r\n  QUESTION: -2,\r\n  FLAG: -3,\r\n  QUESTION_MINE: -4,\r\n  FLAG_MINE: -5,\r\n  CLICKED_MINE: -6,\r\n  OPENED: 0\r\n};\r\n\r\n// 초기값 세팅\r\nexport const TableContext = createContext({\r\n  tableData: [],\r\n  dispatch: () => {},\r\n  halted: true\r\n});\r\n\r\nconst initialState = {\r\n  tableData: [],\r\n  timer: 0,\r\n  result: \"\",\r\n  halted: true,\r\n  gameData: {\r\n    row: 0,\r\n    cell: 0,\r\n    mine: 0\r\n  },\r\n  isWin: false\r\n};\r\n\r\nconst plantMine = (row, cell, mine) => {\r\n  const data = [];\r\n  const shuffle = [];\r\n  let i = 0;\r\n  while (i < mine) {\r\n    const chosen = Math.floor(Math.random() * (row * cell));\r\n    if (shuffle.includes(chosen) === false) {\r\n      shuffle.push(chosen);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < row; i++) {\r\n    const rowData = [];\r\n    data.push(rowData);\r\n    for (let j = 0; j < cell; j++) {\r\n      rowData.push(CODE.NORMAL);\r\n    }\r\n  }\r\n\r\n  for (let k = 0; k < shuffle.length; k++) {\r\n    const ver = Math.floor(shuffle[k] / cell);\r\n    const hor = shuffle[k] % cell;\r\n    data[ver][hor] = CODE.MINE;\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport const START_GAME = \"START_GAME\";\r\nexport const OPEN_CELL = \"OPEN_CELL\";\r\nexport const CLICK_MINE = \"CLICK_MINE\";\r\nexport const FLAG_CELL = \"FLAG_CELL\";\r\nexport const QUESTION_CELL = \"QUESTION_CELL\";\r\nexport const NORMAL_CELL = \"NORMAL_CELL\";\r\nexport const INCREMENT_TIMER = \"INCREMENT_TIMER\";\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case START_GAME:\r\n      return {\r\n        ...state,\r\n        tableData: plantMine(action.row, action.cell, action.mine),\r\n        halted: false,\r\n        gameData: {\r\n          row: action.row,\r\n          cell: action.cell,\r\n          mine: action.mine\r\n        },\r\n        timer: 0,\r\n        result: \"\",\r\n        isWin: false\r\n      };\r\n    case OPEN_CELL: {\r\n      const tableData = [...state.tableData];\r\n      tableData.forEach((row, i) => {\r\n        tableData[i] = [...row];\r\n      });\r\n      const checked = [];\r\n\r\n      let openCount = 0;\r\n\r\n      const checkAround = (row, cell) => {\r\n        if (\r\n          row < 0 ||\r\n          row >= tableData.length ||\r\n          cell < 0 ||\r\n          cell >= tableData[0].length\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          [\r\n            CODE.FLAG,\r\n            CODE.FLAG_MINE,\r\n            CODE.OPENED,\r\n            CODE.QUESTION,\r\n            CODE.QUESTION_MINE\r\n          ].includes(tableData[row][cell])\r\n        ) {\r\n          return;\r\n        }\r\n        if (checked.includes(row + \",\" + cell)) {\r\n          return;\r\n        } else {\r\n          checked.push(row + \",\" + cell);\r\n        }\r\n        let around = [];\r\n        if (tableData[row - 1]) {\r\n          around = around.concat([\r\n            tableData[row - 1][cell - 1],\r\n            tableData[row - 1][cell],\r\n            tableData[row - 1][cell + 1]\r\n          ]);\r\n        }\r\n\r\n        around = around.concat([\r\n          tableData[row][cell - 1],\r\n          tableData[row][cell + 1]\r\n        ]);\r\n\r\n        if (tableData[row + 1]) {\r\n          around = around.concat([\r\n            tableData[row + 1][cell - 1],\r\n            tableData[row + 1][cell],\r\n            tableData[row + 1][cell + 1]\r\n          ]);\r\n        }\r\n\r\n        const count = around.filter((v) =>\r\n          [CODE.FLAG_MINE, CODE.MINE, CODE.QUESTION_MINE].includes(v)\r\n        ).length;\r\n\r\n        if (count === 0) {\r\n          if (row > -1) {\r\n            const near = [];\r\n            if (row - 1 > -1) {\r\n              near.push([row - 1, cell - 1]);\r\n              near.push([row - 1, cell]);\r\n              near.push([row - 1, cell + 1]);\r\n            }\r\n            near.push([row, cell - 1]);\r\n            near.push([row, cell + 1]);\r\n            if (row + 1 < tableData.length) {\r\n              near.push([row + 1, cell - 1]);\r\n              near.push([row + 1, cell]);\r\n              near.push([row + 1, cell + 1]);\r\n            }\r\n            near.forEach((n) => {\r\n              if (tableData[n[0]][n[1]] !== CODE.OPENED) {\r\n                checkAround(n[0], n[1]);\r\n              }\r\n            });\r\n          }\r\n        }\r\n        tableData[row][cell] = count;\r\n      };\r\n\r\n      checkAround(action.row, action.cell);\r\n\r\n      tableData.forEach((tr, i) => {\r\n        tr.forEach((td, j) => {\r\n          if (td >= 0) {\r\n            openCount += 1;\r\n          }\r\n        });\r\n      });\r\n\r\n      let halted = false;\r\n      let result = \"\";\r\n      let isWin = false;\r\n      if (\r\n        openCount ===\r\n        state.gameData.row * state.gameData.cell - state.gameData.mine\r\n      ) {\r\n        halted = true;\r\n        result = <div>You won in {state.timer} seconds!!</div>;\r\n        isWin = true;\r\n      }\r\n      return {\r\n        ...state,\r\n        tableData,\r\n        halted,\r\n        result,\r\n        isWin\r\n      };\r\n    }\r\n    case CLICK_MINE: {\r\n      const tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      tableData[action.row][action.cell] = CODE.CLICKED_MINE;\r\n      for (let i = 0; i < state.gameData.row; i++) {\r\n        for (let j = 0; j < state.gameData.cell; j++) {\r\n          if (\r\n            tableData[i][j] === CODE.MINE ||\r\n            tableData[i][j] === CODE.FLAG_MINE\r\n          ) {\r\n            tableData[i][j] = CODE.CLICKED_MINE;\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        tableData,\r\n        halted: true\r\n      };\r\n    }\r\n    case FLAG_CELL: {\r\n      const tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      tableData[action.row][action.cell] =\r\n        tableData[action.row][action.cell] === CODE.MINE\r\n          ? CODE.FLAG_MINE\r\n          : CODE.FLAG;\r\n      return {\r\n        ...state,\r\n        tableData\r\n      };\r\n    }\r\n    case QUESTION_CELL: {\r\n      const tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      tableData[action.row][action.cell] =\r\n        tableData[action.row][action.cell] === CODE.FLAG_MINE\r\n          ? CODE.QUESTION_MINE\r\n          : CODE.QUESTION;\r\n      return {\r\n        ...state,\r\n        tableData\r\n      };\r\n    }\r\n    case NORMAL_CELL: {\r\n      const tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      tableData[action.row][action.cell] =\r\n        tableData[action.row][action.cell] === CODE.QUESTION_MINE\r\n          ? CODE.MINE\r\n          : CODE.NORMAL;\r\n      return {\r\n        ...state,\r\n        tableData\r\n      };\r\n    }\r\n    case INCREMENT_TIMER: {\r\n      return {\r\n        ...state,\r\n        timer: state.timer + 1\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst MineSearch = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const { tableData, halted, timer, result } = state;\r\n  const value = useMemo(\r\n    () => ({ tableData: tableData, halted: halted, dispatch }),\r\n    [tableData, halted]\r\n  );\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (!halted) {\r\n      timer = setInterval(() => {\r\n        dispatch({ type: INCREMENT_TIMER });\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [halted]);\r\n\r\n  return (\r\n    <TableContext.Provider value={value}>\r\n      <Form />\r\n      <div class=\"timer\">\r\n        <FontAwesomeIcon icon={faStopwatch} /> {timer}\r\n      </div>\r\n      <Table />\r\n\r\n      {state.isWin ? (\r\n        <div class=\"result-win\"> {result}</div>\r\n      ) : (\r\n        <div class=\"result-fail\">{result}</div>\r\n      )}\r\n    </TableContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MineSearch;\r\n","import \"./App.css\";\nimport MineSearch from \"./component/MineSearch.js\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <MineSearch />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}